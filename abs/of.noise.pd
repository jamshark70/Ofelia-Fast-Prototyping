#N canvas 295 93 1068 673 12;
#X msg 200 31 noisescale \$1;
#X msg 310 30 noisevel \$1;
#X obj 15 5 inlet;
#X obj 200 6 inlet;
#X obj 310 5 inlet;
#X obj 15 316 outlet;
#X obj 15 160 f \$0;
#X obj 15 135 route bang;
#X msg 15 185 imageID tex-\$1 \, bang;
#X obj 15 110 ofelia d -k tex-\$0;
#A __set local canvas = ofCanvas(this) \; local args = canvas:getArgs()
\; local width \, height \, type \, noiseScale \, noiseVel = 10 \,
10 \, 0 \, 1 \, 1 \; M.image = ofImage() \; local outlet = ofOutlet(this)
\; \; function M.new() \; ofWindow.addListener("setup" \, this) \;
ofWindow.addListener("update" \, this) \; ofWindow.addListener("exit"
\, this) \; if args[1] == nil then width = 10 end \; if args[2] ==
nil then height = 10 end \; if args[3] == nil then mode = 0 end \;
M.setup() \; end \; \; function M.free() \; ofWindow.removeListener("setup"
\, this) \; ofWindow.removeListener("draw" \, this) \; ofWindow.removeListener("exit"
\, this) \; end \; \; function M.setup() \; ofEnableArbTex() \; ofEnableNormalizedTexCoords()
\; M.image:allocate(width \, height \, type) \; end \; \; function
M.allocate(list) M.image:allocate(list[1] \, list[2] \, list[3]) end
\; function M.noisescale(f) noiseScale = f end \; function M.noisevel(f)
noiseVel = f end \; \; function M.bang() \; local pixels = M.image:getPixels()
\; local w = M.image:getWidth() \; local h = M.image:getHeight() \;
for y=0 \, h-1 do \; for x=0 \, w-1 do \; local i = y * w + x \; local
noiseValue = ofNoise(x * noiseScale \, y * noiseScale \, noiseVel)
\; pixels:setColor(i \, ofColor(255 * noiseValue)) \; end \; end \;
M.image:update() \; outlet:outletBang(0) \; end \; \; function M.exit()
\; M.image:clear() \; end;
#X f 101;
#X connect 0 0 9 0;
#X connect 1 0 9 0;
#X connect 2 0 9 0;
#X connect 3 0 0 0;
#X connect 4 0 1 0;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 7 1 5 0;
#X connect 8 0 5 0;
#X connect 9 0 7 0;
