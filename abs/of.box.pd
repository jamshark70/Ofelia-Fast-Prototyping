#N canvas 155 93 1075 673 12;
#X obj 21 14 inlet;
#X obj 21 232 outlet;
#X obj 80 12 inlet;
#X obj 150 12 inlet;
#X obj 220 12 inlet;
#X obj 290 12 inlet;
#X msg 80 38 width \$1;
#X msg 150 38 height \$1;
#X obj 360 12 inlet;
#X obj 430 12 inlet;
#X msg 220 38 depth \$1;
#X msg 290 38 resw \$1;
#X msg 360 38 resh \$1;
#X msg 430 38 resd \$1;
#X text 988 750 RI;
#X obj 21 207 list trim;
#X obj 21 182 ofelia d -k \$0-box;
#A __set local c = ofCanvas(this) \; local args = c:getArgs() \; local
width \, height \, depth \, resw \, resh \, resd \, drawmode \, strokeweight
\, debug \, normalsize = args[1] \, args[2] \, args[3] \, args[4] \,
args[5] \, args[6] \, args[7] \, args[8] \, 0 \, 1 \; local position
\, orientation \, scale \, lookat = ofVec3f() \, ofVec3f() \, ofVec3f(1
\, 1 \, 1) \, ofVec3f() \; \; function M.new() \; ofWindow.addListener("setup"
\, this) \; if args[1] == nil then width = 100 end \; if args[2] ==
nil then height = 100 end \; if args[3] == nil then depth = 100 end
\; if args[4] == nil then resw = 5 end \; if args[5] == nil then resh
= 5 end \; if args[6] == nil then resd = 5 end \; if args[7] == nil
then drawmode = "fill" end \; if args[8] == nil then strokeweight =
1 end \; M.setup() \; end \; \; function M.free() \; ofWindow.removeListener("setup"
\, this) end \; \; function M.setup() \; M.box = ofBoxPrimitive() \;
M.box:set(width \, height \, depth \, math.abs(resw) \, math.abs(resh)
\, math.abs(resd)) \; M.box:setPosition(position:vec3()) M.box:setOrientation(orientation:vec3())
M.box:setScale(scale:vec3()) \; end \; \; function M.list(l) M.width(l[1])
M.height(l[2]) M.depth(l[3]) M.resw(l[4]) M.resh(l[5]) M.resd(l[6])
M.draw(l[7]) M.stroke(l[8]) end \; function M.width(f) width = f M.box:setWidth(f)
end \; function M.height(f) height = f M.box:setHeight(f) end \; function
M.depth(f) depth = f M.box:setDepth(f) end \; function M.resw(f) resw
= f M.box:setResolutionWidth(f) end \; function M.resh(f) resh = f
M.box:setResolutionHeight(f) end \; function M.resd(f) resd = f M.box:setResolutionDepth(f)
end \; function M.draw(s) drawmode = s end \; function M.stroke(f)
strokeweight = f end \; function M.normalsize(float) normalsize=float
end \; function M.debug(f) debug = f end \; function M.position(l)
position:set (l[1] \, l[2] \, l[3]) M.box:setPosition(position:vec3())
end \; function M.orientation(l) orientation:set (l[1] \, l[2] \, l[3])
M.box:setOrientation(orientation:vec3()) end \; function M.scale(l)
scale:set (l[1] \, l[2] \, l[3]) M.box:setScale(scale:vec3()) end \;
function M.lookat(l) lookat.x=l[1] lookat.y=l[2] lookat.z=l[3] M.box:lookAt(lookat:vec3())
end \; function M.texture(f) if f > 0 then M.box:enableTextures() else
M.box:disableTextures() end end \; function M.texturemap(l) M.box:mapTexCoords(l[1]
\, l[2] \, l[3] \, l[4]) end \; function M.imageID(sym) \; if sym ==
nil then M.imageSource = nil M.lastID = nil return("imageID") \; else
if sym ~= lastID then \; M.imageSource = require(sym) \; M.lastID =
sym \; return ofTable("imageID" \, sym) \; end \; end \; end \; \;
function M.bang() \; ofSetLineWidth(strokeweight) \; if M.imageSource
~= nil then M.imageSource.image:getTexture():bind() end \; if drawmode
== "fill" then M.box:drawFaces() end \; if drawmode == "point" then
M.box:drawVertices() end \; if drawmode == "line" then M.box:drawWireframe()
end \; if drawmode == "normal" then M.box:drawNormals(normalsize) end
\; if debug > 0 then M.box:drawAxes(debug*100) end \; if M.imageSource
~= nil then M.imageSource.image:getTexture():unbind() end \; return
(anything) \; end \;;
#X f 144;
#X connect 0 0 16 0;
#X connect 2 0 6 0;
#X connect 3 0 7 0;
#X connect 4 0 10 0;
#X connect 5 0 11 0;
#X connect 6 0 16 0;
#X connect 7 0 16 0;
#X connect 8 0 12 0;
#X connect 9 0 13 0;
#X connect 10 0 16 0;
#X connect 11 0 16 0;
#X connect 12 0 16 0;
#X connect 13 0 16 0;
#X connect 15 0 1 0;
#X connect 16 0 15 0;
