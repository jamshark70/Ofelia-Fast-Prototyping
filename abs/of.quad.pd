#N canvas 401 93 870 673 12;
#X obj 31 24 inlet;
#X obj 31 221 outlet;
#X obj 90 22 inlet;
#X obj 200 22 inlet;
#X obj 310 22 inlet;
#X obj 420 22 inlet;
#X text 814 735 RI;
#X msg 90 48 corner0 \$1 \$2;
#X msg 200 48 corner1 \$1 \$2;
#X msg 310 48 corner2 \$1 \$2;
#X msg 420 48 corner3 \$1 \$2;
#X obj 31 196 list trim;
#X obj 31 171 ofelia d -k quad\$0;
#A __set local mesh = ofMesh() \; p0 = ofVec3f(-100 \, 100 \, 0) \;
p1 = ofVec3f(100 \, 100 \, 0) \; p2 = ofVec3f(100 \, -100 \, 0) \;
p3 = ofVec3f(-100 \, -100 \, 0) \; t0 = ofVec2f(0.0 \, 1.0) \; t1 =
ofVec2f(1.0 \, 1.0) \; t2 = ofVec2f(1.0 \, 0.0) \; t3 = ofVec2f(0.0
\, 0.0) \; c1 = ofVec4f(1 \, 0 \, 0 \, 1) \; color = ofFloatColor(1
\, 1 \, 1) \; function M.new() \; ofWindow.addListener("setup" \, this)
\; M.setup() \; end \; function M.free() \; ofWindow.removeListener("setup"
\, this) end \; \; function M.setup() \; mesh:setMode(OF_PRIMITIVE_TRIANGLE_FAN)
\; mesh:addVertex(p0:vec3()) \; mesh:addColor(color) \; mesh:addTexCoord(t0:vec2())
\; mesh:addVertex(p1:vec3()) \; mesh:addColor(color) \; mesh:addTexCoord(t1:vec2())
\; mesh:addVertex(p2:vec3()) \; mesh:addColor(color) \; mesh:addTexCoord(t2:vec2())
\; mesh:addVertex(p3:vec3()) \; mesh:addColor(color) \; mesh:addTexCoord(t3:vec2())
\; mesh:addIndex(0) \; mesh:addIndex(1) \; mesh:addIndex(2) \; mesh:addIndex(1)
\; mesh:addIndex(2) \; mesh:addIndex(3) \; end \; function M.corner0(l)
p0.x = l[1] p0.y = l[2] mesh:setVertex(0 \, p0:vec3()) end \; function
M.corner1(l) p1.x = l[1] p1.y = l[2] mesh:setVertex(1 \, p1:vec3())
end \; function M.corner2(l) p2.x = l[1] p2.y = l[2] mesh:setVertex(2
\, p2:vec3()) end \; function M.corner3(l) p3.x = l[1] p3.y = l[2]
mesh:setVertex(3 \, p3:vec3()) end \; function M.imageID(sym) \; if
sym == nil then M.imageSource = nil M.lastID = nil return("imageID")
\; else if sym ~= lastID then \; M.imageSource = require(sym) \; M.lastID
= sym \; return ofTable("imageID" \, sym) \; end \; end \; end \; \;
function M.bang() \; if M.imageSource ~= nil then M.imageSource.image:getTexture():bind()
end \; mesh:draw() \; if M.imageSource ~= nil then M.imageSource.image:getTexture():unbind()
end \; end \;;
#X f 115;
#X connect 0 0 12 0;
#X connect 2 0 7 0;
#X connect 3 0 8 0;
#X connect 4 0 9 0;
#X connect 5 0 10 0;
#X connect 7 0 12 0;
#X connect 8 0 12 0;
#X connect 9 0 12 0;
#X connect 10 0 12 0;
#X connect 11 0 1 0;
#X connect 12 0 11 0;
