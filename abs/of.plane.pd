#N canvas 347 93 870 673 12;
#X obj 31 24 inlet;
#X obj 31 216 outlet;
#X obj 90 22 inlet;
#X obj 160 22 inlet;
#X obj 240 22 inlet;
#X obj 320 22 inlet;
#X msg 90 48 width \$1;
#X msg 160 48 height \$1;
#X msg 240 48 columns \$1;
#X msg 320 48 rows \$1;
#X text 814 202 RI;
#X obj 31 191 list trim;
#X obj 31 166 ofelia d -k plane-\$0;
#A __set local c = ofCanvas(this) \; local args = c:getArgs() \; local
width \, height \, columns \, rows \, drawmode \, strokeweight \, debug
\, normalsize = args[1] \, args[2] \, args[3] \, args[4] \, args[5]
\, args[6] \, 0 \, 10 \; local position \, orientation \, scale \,
lookat = ofVec3f() \, ofVec3f() \, ofVec3f(1 \, 1 \, 1) \, ofVec3f()
\; \; function M.new() \; ofWindow.addListener("setup" \, this) \;
if args[1] == nil then width = 100 end \; if args[2] == nil then height
= 100 end \; if args[3] == nil then columns = 10 end \; if args[4]
== nil then rows = 10 end \; if args[5] == nil then drawmode = "fill"
end \; if args[6] == nil then strokeweight = 1 end \; M.setup() \;
end \; \; function M.free() \; ofWindow.removeListener("setup" \, this)
end \; \; function M.setup() \; M.plane = ofPlanePrimitive() M.plane:enableNormals()
\; M.plane:set(width \, height \, math.abs(columns) \, math.abs(rows)
\, OF_PRIMITIVE_TRIANGLE_STRIP) \; M.plane:setPosition(position:vec3())
M.plane:setOrientation(orientation:vec3()) M.plane:setScale(scale:vec3())
\; end \; \; function M.list(l) M.width(l[1]) M.height(l[2]) M.columns(l[3])
M.rows(l[4]) M.draw(l[5]) M.stroke(l[6]) end \; function M.width(f)
width = f M.plane:setWidth (f) end \; function M.height(f) height =
f M.plane:setHeight (f) end \; function M.columns(f) columns = f M.plane:setColumns
(math.abs(f)) end \; function M.rows(f) rows = f M.plane:setRows (math.abs(f))
end \; function M.draw(s) drawmode = s end \; function M.stroke(f)
strokeweight=f end \; function M.normalsize(float) normalsize=float
end \; function M.debug(f) debug = f end \; function M.position(l)
position.x=l[1] position.y=l[2] position.z=l[3] M.plane:setPosition(position:vec3())
end \; function M.orientation(l) orientation.x=l[1] orientation.y=l[2]
orientation.z=l[3] M.plane:setOrientation(orientation:vec3()) end \;
function M.scale(l) scale.x=l[1] scale.y=l[2] scale.z=l[3] M.plane:setScale(scale:vec3())
end \; function M.lookat(l) lookat.x=l[1] lookat.y=l[2] lookat.z=l[3]
M.plane:lookAt(lookat:vec3()) end \; function M.texture(f) if f > 0
then M.plane:enableTextures() else M.plane:disableTextures() end end
\; function M.texturemap(l) M.plane:mapTexCoords(l[1] \, l[2] \, l[3]
\, l[4]) end \; function M.imageID(sym) \; if sym == nil then M.imageSource
= nil M.lastID = nil return("imageID") \; else if sym ~= lastID then
\; M.imageSource = require(sym) \; M.lastID = sym \; return ofTable("imageID"
\, sym) \; end \; end \; end \; \; function M.bang() \; ofSetLineWidth(strokeweight)
\; if M.imageSource ~= nil then M.imageSource.image:getTexture():bind()
end \; if drawmode == "fill" then M.plane:draw() end \; if drawmode
== "point" then M.plane:drawVertices() end \; if drawmode == "line"
then M.plane:drawWireframe() end \; if drawmode == "normal" then M.plane:drawNormals(normalsize)
end \; if debug > 0 then M.plane:drawAxes(debug*100) end \; if M.imageSource
~= nil then M.imageSource.image:getTexture():unbind() end \; return
anything \; end \;;
#X f 115;
#X connect 0 0 12 0;
#X connect 2 0 6 0;
#X connect 3 0 7 0;
#X connect 4 0 8 0;
#X connect 5 0 9 0;
#X connect 6 0 12 0;
#X connect 7 0 12 0;
#X connect 8 0 12 0;
#X connect 9 0 12 0;
#X connect 11 0 1 0;
#X connect 12 0 11 0;
