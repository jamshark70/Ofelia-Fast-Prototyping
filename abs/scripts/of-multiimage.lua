local canvas = ofCanvas(this);
local args = canvas:getArgs();
local outlet = ofOutlet(this);
local filename, drawimage, X, Y, Z, H, W, index, nb = args[1], 0, 0, 0, 0, 100, 100, 0, 1;
local loaded, saved;
local imageTable = ofTable();
;
function M.new();
ofWindow.addListener("setup", this);
if args[1] == nil then print("[of.image] : No file") else args[1] = filename end;
if args[2] == nil then nb = 1 else nb = args[2] end;
M.buffer(nb);
M.setup();
end;
;
function M.free();
ofWindow.removeListener("setup", this);
for i = 0, nb -1 do;
imageTable[i]:clear();
end;
end;
;
function M.setup();
if filename ~= nil then M.open(ofTable(filename, nb)) end;
end;
;
function M.allocate(list) imageTable:allocate(list[1], list[2], list[3]) end;
function M.clear() imageTable[index]:clear() end;
function M.setimagetype(float) imageTable[index]:setImageType(float) end;
function M.draw(l) drawimage =l[1] X=l[2] Y=l[3] Z=l[4] H=l[5] W=l[6] end;
function M.crop(l) imageTable[index]:crop(l[1], l[2], l[3], l[4]) end;
function M.cropfrom(l) imageTable[index]:cropfrom(imageTable, l[1], l[2], l[3], l[4]) end;
function M.drawsubsection(l) imageTable[index]:drawSubsection(l[1], l[2], l[3], l[4], l[5], l[6]) end;
function M.update() imageTable[index]:update()end;
function M.buffer(i) nb = i for i = 0, nb -1 do;
imageTable[i] = ofImage() end end;
;
function M.open(l);
ofSetDataPathRoot(ofCanvas(this, 1):getDir());
if type(l) == "string" then;
filename = l;
loaded = imageTable[index]:load(filename);
else;
filename = l[1];
M.buffer(l[2]);
for i = 0, nb -1 do;
if ofWindow.exists then;
ofDisableArbTex();
imageTable[i]:clear();
loaded = imageTable[i]:load(ofFile(filename):getEnclosingDirectory() .. i..".png")
end;
end;
end;
if loaded then print("loaded " .. filename.." ".."to " .. math.floor(nb -1)) end;
M.index(index);
end;
;
function M.index(i) index = i % nb M.image = imageTable[index] end;
function M.save(string);
if ofWindow.exists then;
saved = imageTable[index]:save(string) end if saved then print("saved " .. string) end;
end;
function M.get() outlet:outletList(1, ofTable (loaded, imageTable[index]:getWidth(), imageTable[index]:getHeight(), imageTable[index]:getImageType(), imageTable[index]:getTexture(), imageTable[index]:getPixels())) end;
function M.imageID() end;
;
function M.bang();
if drawimage == 1 then imageTable:draw(X, Y, Z, H, W) end;
outlet:outletBang(0);
end;
