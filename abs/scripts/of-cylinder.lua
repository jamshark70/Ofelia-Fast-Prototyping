local c = ofCanvas(this);
local args = c:getArgs();
local radius, height, rres, hres, cres, drawmode, strokeweight, debug, normalsize = args[1], args[2], args[3], args[4], args[5], args[6], args[7], 0, 10;
local position, orientation, scale, lookat = ofVec3f(0, 0, 0), ofVec3f(0, 0, 0), ofVec3f(1, 1, 1), ofVec3f(1, 1, 1);
;
function M.new();
ofWindow.addListener("setup", this);
if args[1] == nil then radius = 100 end;
if args[2] == nil then height = 100 end;
if args[3] == nil then rres = 10 end;
if args[4] == nil then hres = 10 end;
if args[5] == nil then cres = 10 end;
if args[6] == nil then drawmode = "fill" end;
if args[7] == nil then strokeweight = 1 end;
M.setup();
end;
;
function M.free();
ofWindow.removeListener("setup", this) end;
;
function M.setup();
M.cylinder = ofCylinderPrimitive();
M.cylinder:set(radius, height, rres, hres, cres, true, OF_PRIMITIVE_TRIANGLE_STRIP);
M.cylinder:setPosition(position:vec3()) M.cylinder:setOrientation(orientation:vec3()) M.cylinder:setScale(scale:vec3());
end;
;
function M.list(l) M.radius(l[1]) M.height(l[2]) M.rres(l[3]) M.hres(l[4]) M.cres(l[5]) M.draw(l[6]) M.stroke(l[7]) end;
function M.radius(f) radius=f M.cylinder:setRadius(f) end;
function M.height(f) height=f M.cylinder:setHeight(f) end;
function M.rres(f) rres=f M.cylinder:setResolutionRadius(f) end;
function M.hres(f) hres=f M.cylinder:setResolutionHeight(f) end;
function M.cres(f) cres=f M.cylinder:setResolutionCap(f) end;
function M.draw(s) drawmode=s end;
function M.stroke(float) strokeweight=float end;
function M.normalsize(float) normalsize=float end;
function M.debug(f) debug = f end;
function M.position(l) position.x=l[1] position.y=l[2] position.z=l[3] M.cylinder:setPosition(position:vec3()) end;
function M.orientation(l) orientation.x=l[1] orientation.y=l[2] orientation.z=l[3] M.cylinder:setOrientation(orientation:vec3()) end;
function M.scale(l) scale.x=l[1] scale.y=l[2] scale.z=l[3] M.cylinder:setScale(scale:vec3()) end;
function M.lookat(l) lookat.x=l[1] lookat.y=l[2] lookat.z=l[3] M.cylinder:lookAt(lookat:vec3()) end;
function M.texture(f) if f > 0 then M.cylinder:enableTextures() else M.cylinder:disableTextures() end end;
function M.texturemap(l) M.cylinder:mapTexCoords(l[1], l[2], l[3], l[4]) end;
function M.imageID(sym);
if sym == nil then M.imageSource = nil M.lastID = nil return("imageID");
else if sym ~= lastID then;
M.imageSource = require(sym);
M.lastID = sym;
return ofTable("imageID", sym);
end;
end;
end;
;
function M.bang();
ofSetLineWidth(strokeweight);
if M.imageSource ~= nil then M.imageSource.image:getTexture():bind() end;
if drawmode == "fill" then M.cylinder:drawFaces() end;
if drawmode == "point" then M.cylinder:drawVertices() end;
if drawmode == "line" then M.cylinder:drawWireframe() end;
if drawmode == "normal" then M.cylinder:drawNormals(normalsize) end;
if debug > 0 then M.cylinder:drawAxes(debug*100) end;
if M.imageSource ~= nil then M.imageSource.image:getTexture():unbind() end;
return anything;
end;
