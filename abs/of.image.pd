#N canvas 450 93 771 673 12;
#X obj 15 10 inlet;
#X obj 15 316 outlet;
#X obj 733 135 outlet;
#X text 669 133 RI;
#X obj 15 160 f \$0;
#X obj 15 135 route bang;
#X text 207 185 .lua script file has no knowledge of \$0's value \;
Pd objects must interpolate the ID message;
#X msg 15 185 imageID image-\$1 \, bang;
#X obj 15 70 route imageID;
#X text 114 70 swallow 'imageID': this object originates a new value
;
#X obj 15 110 ofelia d -c12 -k image-\$0;
#A __set local canvas = ofCanvas(this) \; local args = canvas:getArgs()
\; local outlet = ofOutlet(this) \; M.image = ofImage() \; local filename
\, drawimage \, X \, Y \, Z \, H \, W = args[1] \, args[2] \, 0 \,
0 \, 0 \, 100 \, 100 \; local loaded \, saved \; local previousname
="me" \; \; function M.new() \; ofWindow.addListener("setup" \, this)
\; if args[1] == nil then print("[of.image] : No file") \; else args[1]
= filename \; M.setup() \; end \; end \; \; function M.free() \; ofWindow.removeListener("setup"
\, this) \; end \; \; function M.setup() \; if filename ~= nil then
M.open(filename) end \; end \; \; function M.allocate(list) M.image:allocate(list[1]
\, list[2] \, list[3]) end \; function M.clear() M.image:clear() end
\; function M.setimagetype(float) M.image:setImageType(float) end \;
function M.draw(l) drawimage =l[1] X=l[2] Y=l[3] Z=l[4] H=l[5] W=l[6]
end \; function M.crop(l) M.image:crop(l[1] \, l[2] \, l[3] \, l[4])
end \; function M.cropfrom(l) M.image:cropfrom(M.image \, l[1] \, l[2]
\, l[3] \, l[4]) end \; function M.drawsubsection(l) M.image:drawSubsection(l[1]
\, l[2] \, l[3] \, l[4] \, l[5] \, l[6]) end \; function M.update()
M.image:update()end \; function M.open(string) ofSetDataPathRoot(ofCanvas(this
\, 1):getDir()) filename = string \; if ofWindow.exists then ofDisableArbTex()
M.image:clear() \; loaded = M.image:load(filename) end \; if loaded
then print("loaded " .. filename) end \; end \; function M.save(string)
\; if ofWindow.exists then \; saved = M.image:save(string) end if saved
then print("saved " .. string) end \; end \; function M.get() outlet:outletList(1
\, ofTable(loaded \, M.image:getWidth() \, M.image:getHeight() \, M.image:getImageType()
\, M.image:getTexture() \, M.image:getPixels())) end \; \; function
M.bang() \; if drawimage == 1 then M.image:draw(X \, Y \, Z \, H \,
W) end \; outlet:outletBang(0) \; end \;;
#X f 103;
#X connect 0 0 8 0;
#X connect 4 0 7 0;
#X connect 5 0 4 0;
#X connect 5 1 1 0;
#X connect 7 0 1 0;
#X connect 8 1 10 0;
#X connect 10 0 5 0;
#X connect 10 1 2 0;
